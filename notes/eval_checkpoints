Simple Command
-bin
-ls
-empty command
-spaces
-tabs

Arguments
-simple command + ARG

Echo
-echo
-echo + ARG
-echo + -n

Exit
-exit
-exit + ARG

Return Value of Process
-simple command + ARG, then run echo $
-printed value
-wrong command
-$? + $?

Signals
-ctrl-C
-ctrl-\
-ctrl-D
-wrote some stuff then repeat C-\-D
-run blocking command (cat or grep) then repeat C-\-D

Double Quotes
-simple command + dq
-echo "cat lol.c | cat > lol.c"

Single Quotes
-commands + sq as ARG
-empty ARG
-env, whitespaces, pipes, redirection for single quotes
-echo '$USER' must print "$USER"

Built-ins
-env
-export
-unset, Export env, create new ones and replace old ones
-cd
-cd .
-cd ..
-pwd
-relative path

Environment Path
-Execute commands without any path (ls, wc, awk and so forth).
-Unset the $PATH and ensure commands are not working anymore.
-Set $PATH to a multiple directory value (directory1:directory2).

Redirection
-commands + < and/or >
-Repeat and use > with >>
-Check if multiple tries of the same redirections fail.
-Test << redirection (it doesn't have to update the history).

Pipes
-Execute commands with pipes like 'cat file | grep bla | more'
-Repeat multiple times with different commands and arguments.
-Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'
-Try to mix pipes and redirections.


Go Crazy and history
-Type a command line, then use ctrl-C and press "Enter". The buffer should be clean and there should be nothing left to execute.
-Can we navigate through history using Up and Down? Can we retry some command?
-Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error.
-'cat | cat | ls' should behave in a "normal way".
-Try to execute a long command with a ton of arguments.

Environment variables

-Execute echo with some environment variables ($variable) as arguments.
-Check that $ is interpreted as an environment variable.
-Check that double quotes interpolate $.
-Check that USER exists. Otherwise, set it.
-echo "$USER" should print the value of the USER variable.

