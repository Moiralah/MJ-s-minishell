MINISHELL.H

struct  node
{
  union
  {
    CD_node  *CD;
    ...
    // ... means all the other kinds of node for both the in
    // -built commands and execve command
  };
  struct node  *next;
}

struct  CD_node
{
  // Other XX_node(s) should be made in similar fashion
  // with variables needed for the run function declared
  // first, followed last by a run function
  char  *new_path;
  void  (*run) (ch *new_path);
}

-------------------------------------------------------------------------------------

ch  *ft_strip(ch *str, int ch)
{
  //This function removes character ch from the front and end of sentence str
}

void  run_CD(char *new_path)
{
  chdir(new_path);
}

node  *create_CD_node(char *path)
{
  // This function represents a kind of constructor. Other create_XX_node functions behave in a similar manner
  // by assigning the type of node the new node is and the function to be run with that new node. It should be
  // noted that necessary information required for the node to run properly are to be assigned at this stage too
  // Eg. the file path user wants to cd to is assigned now
  node  *new_node;

  new_node = malloc(sizeof(node));
  new_node->type = malloc(sizeof(CD_node));
  new_node->type->new_path = path;
  new_node->type->run = run_CD;
  return (new_node);
}

node  *func_match(char *comm)
{
  node  *new_node;
  char  **comm_flags;

  comm = ft_strip(comm, ' ');
  comm_flags = ft_split(comm, ' ');
  if (ft_strcmp(comm_flags[0], "cd"))
    new_node = create_CD_node(comm_flags[1]);
  else if (ft_strcmp(comm_flags[0], "echo"))
    new_node = create_ECHO_node();
  else if (ft_strcmp(comm_flags[0], "pwd"))
    new_node = create_PWD_node();
  else if (ft_strcmp(comm_flags[0], "export"))
    new_node = create_EXPT_node();
  else if (ft_strcmp(comm_flags[0], "unset"))
    new_node = create_UNST_node();
  else if (ft_strcmp(comm_flags[0], "env"))
    new_node = create_ENV_node();
  else if (ft_strcmp(comm_flags[0], "exit"))
    new_node = create_EXIT_node();
  else
    new_node = create_EXEC_node();
  return (new_node);
}

node  *get_next_nodes(node *current_node, char *comm, int *pid)
{
  node  *redir_node;
  char  *command;
  char  ch;

  ch = '\0';
  if (ft_strch(comm, '<') >= 0)
    ch = '<';
  else if (ft_strch(comm, '>') >= 0)
    ch = '>';
  if (!ch)
    return (NULL);
  redir_node = malloc(sizeof(node));
  redir_node->type = malloc(sizeof(redir_node));
  redir_node->next = NULL;
  current_node->next = redir_node;
  if (comm[ft_strch(ch) + 1] == ch):
    ch += 1
  redir_node->type->ch = ch;
  command = ft_substr(comm, 0, ft_strch(comm, ch), len);
  redir_node->type->filename = ft_substr(comm, ft_strrch(comm, ch) + 1, len , len);
  if (ft_strch(comm, ch) == 0)
  {
    command = ft_substr(comm, ft_strrch(comm, ' ') + 1, len, len);
    redir_node->type->filename = ft_substr(comm, ft_strrch(comm, ch) + 1, ft_strrch(comm, ' '), len);
  }
  redir_node->type->pid = pid;
  current_node->next->next = func_match(command)
  return (current_node->next->next);
}

void  run_list(char *start)
{
  while(start->next != NULL)
  {
    // Still thinking how to do it
  }
}

int main()
{
  int  running;

  running = 1;
  while (running)
  {
    node  *current_node;
    node  *start_node;
    char  **comms;
    char  *input;
    int   pid[2];
    int   i;

    i = -1;
    input = readline();
    add_history(input);
    comms = ft_split(input, '|');
    current_node = malloc(sizeof(node *));
    current_node->type = NULL;
    current_node->next = NULL;
    start_node = current_node;
    while(comms[++i] != NULL)
    {
      dup2(pid[0], STDOUT);
      dup2(pid[1], STDIN);
      current_node = get_next_nodes(current_node, comms[i], pid);
    }
    run_list(start_node);
  }
}
